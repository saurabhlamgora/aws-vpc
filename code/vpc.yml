AWSTemplateFormatVersion: "2010-09-09"
Description: Deploys a 3-tier VPC with two Managed NATs, two public subnets and four private subnets

Parameters:
  AppName:
    Type: String
    Default: shopify
  ProvisionHA:
    Type: String
    Default: false
  VpcCidrBlock:
    Type: String
    Default: 10.0.0.0/16
  Subnet0:
    Type: String
    Default: 10.0.0.0/24
  Subnet1:
    Type: String
    Default: 10.0.1.0/24
  Subnet2:
    Type: String
    Default: 10.0.2.0/24
  Subnet3:
    Type: String
    Default: 10.0.3.0/24
  Subnet4:
    Type: String
    Default: 10.0.4.0/24
  Subnet5:
    Type: String
    Default: 10.0.5.0/24

Mappings:
  AZRegions:
    us-east-1:
      AZs: ["a", "b"]

Conditions:
  ProvisionHA: !Equals
    - !Ref ProvisionHA
    - true

Resources:
  VPC:
    Type: "AWS::EC2::VPC"
    Properties:
      EnableDnsSupport: "true"
      EnableDnsHostnames: "true"
      CidrBlock: !Ref VpcCidrBlock
      Tags:
        - Key: "Application"
          Value: !Ref "AppName"
        - Key: "Network"
          Value: "Public"
        - Key: "Name"
          Value:
            Fn::Sub: "${AppName}-vpc"

  WebPublicSubnetA:
    Type: "AWS::EC2::Subnet"
    Properties:
      VpcId:
        Ref: "VPC"
      AvailabilityZone:
        Fn::Sub:
          - "${AWS::Region}${AZ}"
          - AZ: !Select [0, !FindInMap ["AZRegions", !Ref "AWS::Region", "AZs"]]
      CidrBlock: !Ref Subnet0
      MapPublicIpOnLaunch: "true"
      Tags:
        - Key: "Application"
          Value: !Ref "AppName"
        - Key: "Network"
          Value: "Public"
        - Key: "Name"
          Value: "web-public-subnet-a"

  WebPublicSubnetB:
    Type: "AWS::EC2::Subnet"
    Properties:
      VpcId:
        Ref: "VPC"
      AvailabilityZone:
        Fn::Sub:
          - "${AWS::Region}${AZ}"
          - AZ: !Select [1, !FindInMap ["AZRegions", !Ref "AWS::Region", "AZs"]]
      CidrBlock: !Ref Subnet1
      MapPublicIpOnLaunch: "true"
      Tags:
        - Key: "Application"
          Value: !Ref "AppName"
        - Key: "Network"
          Value: "Public"
        - Key: "Name"
          Value: "web-public-subnet-b"

  AppPrivateSubnetA:
    Type: "AWS::EC2::Subnet"
    Properties:
      VpcId:
        Ref: "VPC"
      AvailabilityZone:
        Fn::Sub:
          - "${AWS::Region}${AZ}"
          - AZ: !Select [0, !FindInMap ["AZRegions", !Ref "AWS::Region", "AZs"]]
      CidrBlock: !Ref Subnet2
      Tags:
        - Key: "Application"
          Value: !Ref "AppName"
        - Key: "Network"
          Value: "Private"
        - Key: "Name"
          Value: "app-private-subnet-a"

  AppPrivateSubnetB:
    Type: "AWS::EC2::Subnet"
    Properties:
      VpcId:
        Ref: "VPC"
      AvailabilityZone:
        Fn::Sub:
          - "${AWS::Region}${AZ}"
          - AZ: !Select [1, !FindInMap ["AZRegions", !Ref "AWS::Region", "AZs"]]
      CidrBlock: !Ref Subnet3
      Tags:
        - Key: "Application"
          Value: !Ref "AppName"
        - Key: "Network"
          Value: "Private"
        - Key: "Name"
          Value: "app-private-subnet-b"

  DbPrivateSubnetA:
    Type: "AWS::EC2::Subnet"
    Properties:
      VpcId:
        Ref: "VPC"
      AvailabilityZone:
        Fn::Sub:
          - "${AWS::Region}${AZ}"
          - AZ: !Select [0, !FindInMap ["AZRegions", !Ref "AWS::Region", "AZs"]]
      CidrBlock: !Ref Subnet4
      Tags:
        - Key: "Application"
          Value: !Ref "AppName"
        - Key: "Network"
          Value: "Private"
        - Key: "Name"
          Value: "db-private-subnet-a"

  DbPrivateSubnetB:
    Type: "AWS::EC2::Subnet"
    Properties:
      VpcId:
        Ref: "VPC"
      AvailabilityZone:
        Fn::Sub:
          - "${AWS::Region}${AZ}"
          - AZ: !Select [1, !FindInMap ["AZRegions", !Ref "AWS::Region", "AZs"]]
      CidrBlock: !Ref Subnet5
      Tags:
        - Key: "Application"
          Value: !Ref "AppName"
        - Key: "Network"
          Value: "Private"
        - Key: "Name"
          Value: "db-private-subnet-b"

  InternetGateway:
    Type: "AWS::EC2::InternetGateway"
    Properties:
      Tags:
        - Key: "Application"
          Value: !Ref "AppName"
        - Key: "Network"
          Value: "Public"
        - Key: "Name"
          Value:
            Fn::Sub: "${AppName}-igw"

  GatewayToInternet:
    Type: "AWS::EC2::VPCGatewayAttachment"
    Properties:
      VpcId:
        Ref: "VPC"
      InternetGatewayId:
        Ref: "InternetGateway"

  PublicRouteTable:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId:
        Ref: "VPC"
      Tags:
        - Key: "Application"
          Value: !Ref "AppName"
        - Key: "Network"
          Value: "Public"
        - Key: "Name"
          Value:
            Fn::Sub: "${AppName}-public-route-table"

  PublicRoute:
    Type: "AWS::EC2::Route"
    DependsOn: "GatewayToInternet"
    Properties:
      RouteTableId:
        Ref: "PublicRouteTable"
      DestinationCidrBlock: "0.0.0.0/0"
      GatewayId:
        Ref: "InternetGateway"

  PublicSubnetRouteTableAssociationA:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      SubnetId:
        Ref: "WebPublicSubnetA"
      RouteTableId:
        Ref: "PublicRouteTable"

  PublicSubnetRouteTableAssociationB:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      SubnetId:
        Ref: "WebPublicSubnetB"
      RouteTableId:
        Ref: "PublicRouteTable"

  PublicNetworkAcl:
    Type: "AWS::EC2::NetworkAcl"
    Properties:
      VpcId:
        Ref: "VPC"
      Tags:
        - Key: "Application"
          Value: !Ref "AppName"
        - Key: "Network"
          Value: "Public"
        - Key: "Name"
          Value:
            Fn::Sub: "${AppName}-public-nacl"

  InboundPublicNetworkAclEntry:
    Type: "AWS::EC2::NetworkAclEntry"
    Properties:
      NetworkAclId:
        Ref: "PublicNetworkAcl"
      RuleNumber: "100"
      Protocol: "-1"
      RuleAction: "allow"
      Egress: "false"
      CidrBlock: "0.0.0.0/0"

  OutboundPublicNetworkAclEntry:
    Type: "AWS::EC2::NetworkAclEntry"
    Properties:
      NetworkAclId:
        Ref: "PublicNetworkAcl"
      RuleNumber: "100"
      Protocol: "-1"
      RuleAction: "allow"
      Egress: "true"
      CidrBlock: "0.0.0.0/0"

  PublicSubnetNetworkAclAssociationA:
    Type: "AWS::EC2::SubnetNetworkAclAssociation"
    Properties:
      SubnetId:
        Ref: "WebPublicSubnetA"
      NetworkAclId:
        Ref: "PublicNetworkAcl"

  PublicSubnetNetworkAclAssociationB:
    Type: "AWS::EC2::SubnetNetworkAclAssociation"
    Properties:
      SubnetId:
        Ref: "WebPublicSubnetB"
      NetworkAclId:
        Ref: "PublicNetworkAcl"

  AppPrivateNetworkAcl:
    Type: "AWS::EC2::NetworkAcl"
    Properties:
      VpcId:
        Ref: "VPC"
      Tags:
        - Key: "Application"
          Value: !Ref "AppName"
        - Key: "Network"
          Value: "Private"
        - Key: "Name"
          Value:
            Fn::Sub: "${AppName}-app-private-nacl"

  InboundAppNetworkAclEntry:
    Type: "AWS::EC2::NetworkAclEntry"
    Properties:
      NetworkAclId:
        Ref: "AppPrivateNetworkAcl"
      RuleNumber: "100"
      Protocol: "-1"
      RuleAction: "allow"
      Egress: "false"
      CidrBlock: "0.0.0.0/0"

  OutboundAppNetworkAclEntry:
    Type: "AWS::EC2::NetworkAclEntry"
    Properties:
      NetworkAclId:
        Ref: "AppPrivateNetworkAcl"
      RuleNumber: "100"
      Protocol: "-1"
      RuleAction: "allow"
      Egress: "true"
      CidrBlock: "0.0.0.0/0"

  AppPrivateSubnetNetworkAclAssociationA:
    Type: "AWS::EC2::SubnetNetworkAclAssociation"
    Properties:
      SubnetId:
        Ref: "AppPrivateSubnetA"
      NetworkAclId:
        Ref: "AppPrivateNetworkAcl"

  AppPrivateSubnetNetworkAclAssociationB:
    Type: "AWS::EC2::SubnetNetworkAclAssociation"
    Properties:
      SubnetId:
        Ref: "AppPrivateSubnetB"
      NetworkAclId:
        Ref: "AppPrivateNetworkAcl"

  DbPrivateNetworkAcl:
    Type: "AWS::EC2::NetworkAcl"
    Properties:
      VpcId:
        Ref: "VPC"
      Tags:
        - Key: "Application"
          Value: !Ref "AppName"
        - Key: "Network"
          Value: "Private"
        - Key: "Name"
          Value:
            Fn::Sub: "${AppName}-db-private-nacl"

  InboundDbNetworkAclEntryA:
    Type: "AWS::EC2::NetworkAclEntry"
    Properties:
      NetworkAclId:
        Ref: "DbPrivateNetworkAcl"
      RuleNumber: "100"
      Protocol: "-1"
      RuleAction: "allow"
      Egress: "false"
      CidrBlock: "0.0.0.0/0"

  OutboundDbNetworkAclEntry:
    Type: "AWS::EC2::NetworkAclEntry"
    Properties:
      NetworkAclId:
        Ref: "DbPrivateNetworkAcl"
      RuleNumber: "100"
      Protocol: "-1"
      RuleAction: "allow"
      Egress: "true"
      CidrBlock: "0.0.0.0/0"

  DbPrivateSubnetNetworkAclAssociationA:
    Type: "AWS::EC2::SubnetNetworkAclAssociation"
    Properties:
      SubnetId:
        Ref: "DbPrivateSubnetA"
      NetworkAclId:
        Ref: "DbPrivateNetworkAcl"

  DbPrivateSubnetNetworkAclAssociationB:
    Type: "AWS::EC2::SubnetNetworkAclAssociation"
    Properties:
      SubnetId:
        Ref: "DbPrivateSubnetB"
      NetworkAclId:
        Ref: "DbPrivateNetworkAcl"

  ElasticIpA:
    Type: "AWS::EC2::EIP"
    Properties:
      Domain: "vpc"
      Tags:
        - Key: "Application"
          Value: !Ref "AppName"
        - Key: "Name"
          Value:
            Fn::Sub: "${AppName}-eip-nat-a"

  NATGatewayA:
    Type: "AWS::EC2::NatGateway"
    Properties:
      AllocationId:
        Fn::GetAtt:
          - "ElasticIpA"
          - "AllocationId"
      SubnetId:
        Ref: "WebPublicSubnetA"
      Tags:
        - Key: "Application"
          Value: !Ref "AppName"
        - Key: "Name"
          Value:
            Fn::Sub: "${AppName}-nat-a"

  PrivateRouteTableA:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId:
        Ref: "VPC"
      Tags:
        - Key: "Name"
          Value:
            Fn::Sub: "${AppName}-private-route-table-a"

  PrivateRouteToInternetA:
    Type: "AWS::EC2::Route"
    Properties:
      RouteTableId:
        Ref: "PrivateRouteTableA"
      DestinationCidrBlock: "0.0.0.0/0"
      NatGatewayId:
        Ref: "NATGatewayA"

  PrivateSubnetRouteTableAssociationA1:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      SubnetId:
        Ref: "AppPrivateSubnetA"
      RouteTableId:
        Ref: "PrivateRouteTableA"

  PrivateSubnetRouteTableAssociationA2:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      SubnetId:
        Ref: "DbPrivateSubnetA"
      RouteTableId:
        Ref: "PrivateRouteTableA"

  ElasticIpB:
    Type: "AWS::EC2::EIP"
    Condition: ProvisionHA
    Properties:
      Domain: "vpc"
      Tags:
        - Key: "Application"
          Value: !Ref "AppName"
        - Key: "Name"
          Value:
            Fn::Sub: "${AppName}-eip-nat-b"

  NATGatewayB:
    Type: "AWS::EC2::NatGateway"
    Condition: ProvisionHA
    Properties:
      AllocationId:
        Fn::GetAtt:
          - "ElasticIpB"
          - "AllocationId"
      SubnetId:
        Ref: "WebPublicSubnetB"
      Tags:
        - Key: "Application"
          Value: !Ref "AppName"
        - Key: "Name"
          Value:
            Fn::Sub: "${AppName}-nat-b"

  PrivateRouteTableB:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId:
        Ref: "VPC"
      Tags:
        - Key: "Name"
          Value:
            Fn::Sub: "${AppName}-private-route-table-b"

  PrivateRouteToInternetB:
    Type: "AWS::EC2::Route"
    Condition: ProvisionHA
    Properties:
      RouteTableId:
        Ref: "PrivateRouteTableB"
      DestinationCidrBlock: "0.0.0.0/0"
      NatGatewayId:
        Ref: "NATGatewayB"

  PrivateSubnetRouteTableAssociationB1:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      SubnetId:
        Ref: "AppPrivateSubnetB"
      RouteTableId:
        Ref: "PrivateRouteTableB"

  PrivateSubnetRouteTableAssociationB2:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      SubnetId:
        Ref: "DbPrivateSubnetB"
      RouteTableId:
        Ref: "PrivateRouteTableB"

  WebSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      VpcId:
        Ref: "VPC"
      GroupDescription: "Security group for the web-tier"
      Tags:
        - Key: "Application"
          Value: !Ref "AppName"
        - Key: "Name"
          Value:
            Fn::Sub: "${AppName}-web-sg"

  WebSecurityGroupIngressA:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref WebSecurityGroup
      IpProtocol: -1
      FromPort: 0
      ToPort: 65535
      SourceSecurityGroupId: !Ref WebSecurityGroup

  AppSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      VpcId:
        Ref: "VPC"
      GroupDescription: "Security group for the app-tier"
      Tags:
        - Key: "Application"
          Value: !Ref "AppName"
        - Key: "Name"
          Value:
            Fn::Sub: "${AppName}-app-sg"

  AppSecurityGroupIngressA:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref AppSecurityGroup
      IpProtocol: -1
      FromPort: 0
      ToPort: 65535
      SourceSecurityGroupId: !Ref AppSecurityGroup

  DbSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      VpcId:
        Ref: "VPC"
      GroupDescription: "Security group for the db-tier"
      Tags:
        - Key: "Application"
          Value: !Ref "AppName"
        - Key: "Name"
          Value:
            Fn::Sub: "${AppName}-db-sg"

  DbSecurityGroupIngressA:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref DbSecurityGroup
      IpProtocol: -1
      FromPort: 0
      ToPort: 65535
      SourceSecurityGroupId: !Ref DbSecurityGroup

Outputs:
  VPCId:
    Description: "VPCId of VPC"
    Value:
      Ref: "VPC"
    Export:
      Name: !Sub "${AWS::Region}-${AppName}:vpc"

  WebPublicSubnetA:
    Description: "SubnetId of web-public-subnet-a"
    Value:
      Ref: "WebPublicSubnetA"
    Export:
      Name: !Sub "${AWS::Region}-${AppName}:web-public-subnet-a"

  WebPublicSubnetB:
    Description: "SubnetId of web-public-subnet-b"
    Value:
      Ref: "WebPublicSubnetB"
    Export:
      Name: !Sub "${AWS::Region}-${AppName}:web-public-subnet-b"

  AppPrivateSubnetA:
    Description: "SubnetId of app-private-subnet-a"
    Value:
      Ref: "AppPrivateSubnetA"
    Export:
      Name: !Sub "${AWS::Region}-${AppName}:app-private-subnet-a"

  AppPrivateSubnetB:
    Description: "SubnetId of app-private-subnet-b"
    Value:
      Ref: "AppPrivateSubnetB"
    Export:
      Name: !Sub "${AWS::Region}-${AppName}:app-private-subnet-b"

  DbPrivateSubnetA:
    Description: "SubnetId of db-private-subnet-a"
    Value:
      Ref: "DbPrivateSubnetA"
    Export:
      Name: !Sub "${AWS::Region}-${AppName}:db-private-subnet-a"

  DbPrivateSubnetB:
    Description: "SubnetId of db-private-subnet-b"
    Value:
      Ref: "DbPrivateSubnetB"
    Export:
      Name: !Sub "${AWS::Region}-${AppName}:db-private-subnet-b"

  PublicRouteTable:
    Description: "Id of public route table"
    Value:
      Ref: "PublicRouteTable"
    Export:
      Name: !Sub "${AWS::Region}-${AppName}:public-route-table"

  PrivateRouteTableA:
    Description: "Id of private route table for AZ 1-a"
    Value:
      Ref: "PrivateRouteTableA"
    Export:
      Name: !Sub "${AWS::Region}-${AppName}:private-route-table-a"

  PrivateRouteTableB:
    Description: "Id of private route table for AZ 1-b"
    Value:
      Ref: "PrivateRouteTableB"
    Export:
      Name: !Sub "${AWS::Region}-${AppName}:private-route-table-b"

  WebSecurityGroup:
    Description: "Id of the web-tier security group"
    Value:
      Ref: "WebSecurityGroup"
    Export:
      Name: !Sub "${AWS::Region}-${AppName}:web-sg"

  AppSecurityGroup:
    Description: "Id of the app-tier security group"
    Value:
      Ref: "AppSecurityGroup"
    Export:
      Name: !Sub "${AWS::Region}-${AppName}:app-sg"

  DbSecurityGroup:
    Description: "Id of the db-tier security group"
    Value:
      Ref: "DbSecurityGroup"
    Export:
      Name: !Sub "${AWS::Region}-${AppName}:db-sg"
